---
description: "Database patterns, SQLAlchemy 2.0+ async patterns, and Alembic migrations for Marty"
globs: ["**/database.py", "**/crud.py", "**/models.py", "**/alembic/**", "**/*_model.py", "**/*_models.py"]
alwaysApply: false
---

# Database Development Rules

## Database Stack
- **SQLAlchemy 2.0+** with async patterns
- **Alembic** for schema migrations
- **PostgreSQL** for production (via asyncpg)
- **SQLite** for development (via aiosqlite)
- **Async sessions** throughout

## Database Configuration
```python
# Production (Supabase)
DATABASE_URL=postgresql+asyncpg://user:password@host:5432/dbname

# Development (SQLite)
DATABASE_URL=sqlite+aiosqlite:///./marty.db
```

## SQLAlchemy Patterns
- Use **async sessions** exclusively
- Use **declarative base** for models
- Use **relationship()** for foreign keys
- Use **select()** for queries (not session.query)
- Use **merge()** for upserts

## Model Conventions
- Singular class names (Customer, not Customers)
- Use UUID primary keys where appropriate
- Include created_at/updated_at timestamps
- Use proper foreign key relationships
- Add __repr__ methods for debugging

## Database Schema
Based on README architecture:
- **customers**: phone numbers and basic info
- **conversations**: message threads with context
- **messages**: individual texts with direction tracking
- **books**: catalog from Hardcover API
- **inventory**: stock levels and availability
- **orders**: purchases and fulfillment

## Alembic Migration Patterns
```bash
# Generate migration
alembic revision --autogenerate -m "description"

# Apply migrations
alembic upgrade head

# Rollback
alembic downgrade -1

# Reset database
alembic downgrade base
alembic upgrade head
```

## Migration Best Practices
- Always review autogenerated migrations
- Use descriptive migration messages
- Test migrations on development data
- Include both upgrade and downgrade paths
- Never edit committed migrations

## Async Database Operations
```python
# Correct async pattern
async with AsyncSession(engine) as session:
    result = await session.execute(select(Customer))
    customers = result.scalars().all()

# Use session.commit() for transactions
async with AsyncSession(engine) as session:
    session.add(customer)
    await session.commit()
```

## Connection Testing
```python
# Test database connection
python database.py
```

## Troubleshooting
- Check DATABASE_URL environment variable
- Verify database server is running
- Run migrations: `alembic upgrade head`
- Check logs for specific error messages
- Test with sqlite for development issues
